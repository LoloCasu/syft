# This workflow checks out code, builds an image, performs a container image
# scan, evaluates the image, and promotes it if it passes.

name: Syft Demo

on: 
  push:
    branches:
      - main
  schedule:
    - cron: '55 20 */14 * *'
  workflow_dispatch:
    branches:
      - main

  
jobs:

  Build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2
    - name: Build Docker Image
      run: |
        docker build . --file Dockerfile --tag ghcr.io/${GITHUB_REPOSITORY,,}:${GITHUB_SHA}       
    - name: Login to ghcr.io
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${GITHUB_ACTOR} --password-stdin
    - name: Push Docker Image
      run: |
        docker push ghcr.io/${GITHUB_REPOSITORY,,}:${GITHUB_SHA}

  Generate-SBOM:
    # I'm doing this manually, you could also use the sbom-action:
    # https://github.com/anchore/sbom-action
    needs: Build
    runs-on: ubuntu-latest
    steps:
    - name: Install syft
      run: |
        sudo curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        export PATH="/usr/local/bin/:$PATH"
    - name: Generate SPDX SBOM
      run: | 
        syft -o spdx-json ghcr.io/${GITHUB_REPOSITORY,,}:${GITHUB_SHA} > $(basename ${GITHUB_REPOSITORY,,}).spdx.json
        #
        # if you want to block packages, you could do it here by tee'ing the 
        # output into jq, filter for .packages[].name, and then something like 
        # grep -qv for whatever you want to block.  E.g.:
        # syft -o spdx-json ghcr.io/${GITHUB_REPOSITORY,,}:${GITHUB_SHA} | \
        #   tee $(basename ${GITHUB_REPOSITORY,,}).spdx.json | \
        #   jq .packages[].name | \
        #   tr "\n" " " | grep -qv ${BLOCKED_PACKAGE}    
        #
    - name: Archive SBOM
      uses: actions/upload-artifact@v2
      with:
        name: sbom.spdx
        path: ./*.spdx.json
        retention-days: 14

  Promote:
    needs: Generate-SBOM
    runs-on: ubuntu-latest
    steps:
    - name: Login to ghcr.io
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${GITHUB_ACTOR} --password-stdin
    - name: Re-Tag Image
      run: |
        docker pull ghcr.io/${GITHUB_REPOSITORY,,}:${GITHUB_SHA}
        docker tag ghcr.io/${GITHUB_REPOSITORY,,}:${GITHUB_SHA} ghcr.io/${GITHUB_REPOSITORY,,}:${GITHUB_REF_NAME}
    - name: Push Docker Image
      run: |
        docker push ghcr.io/${GITHUB_REPOSITORY,,}:${GITHUB_REF_NAME}
